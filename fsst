#!/usr/bin/env python3
"""Simple script for compiling a fluree transaction init file, and for running basic tests with it"""
import os
import subprocess
import webbrowser
import sys
import argparse
import json
import time
import hashlib
import asyncio
import itertools
CRYPTO_OK = True
try:
    import base58
    import aioflureedb
    import bitcoinlib
except ModuleNotFoundError:
    CRYPTO_OK = False

def key_to_id(privkey):
    """Convert a private key string into a fluree account id.

    Parameters
    ----------
    privkey: string
        A hexadecimal ECDSA private key.

    Returns
    -------
    str
        Base58 encoded adress/key-id within the FlureeDB address namespace

    """
    if privkey:
        # Remove the bitcoin network id and the checksum from the base58 decoded bitcoin adress,
        # then prefix with fluree network id.
        core = b'\x0f\x02' + base58.b58decode(bitcoinlib.keys.Key(privkey).address())[1:-4]
        # Take the sha256 of the sha256 of the decoded and patched bitcoin adress.
        hash1 = hashlib.sha256()
        hash2 = hashlib.sha256()
        hash1.update(core)
        hash2.update(hash1.digest())
        # Use the first 4 characters as checksum, base58 encode the result.
        keyid = base58.b58encode(core + hash2.digest()[:4]).decode()
        return keyid
    return None


def query_to_clojure(obj, params):
    """Convert a FlureeQL query to a clojure '(query (str ...) )' smart-function function body.

    Parameters
    ----------
    obj: dict
        Dict object containing a FlureeQL query
    params: list
        List of parameters to insert into clojure expression

    Returns
    -------
    str
        A clojure (str ) expression that builds the param substituted FlureeQL query as a string.

    Raises
    ------
    RuntimeError
        If PARAM count in JSON and params length don't match
    """
    # Serialize the query, sorted keys for deterministic substitution, no pretty printing
    data = json.dumps(obj, sort_keys=True)
    # Split the JSON into parts using 'PARAM' as seperator
    parts = data.split("PARAM")
    # Escape each JSON part by serializing as a JSON list and removing the qruare brackets
    escaped_parts = [json.dumps([part])[1:-1] for part in parts]
    # The amount of parts should be one more than the amount ot parameters
    if len(parts) != len(params) + 1:
        raise RuntimeError("Param count mismatch: " +
                           str(len(params)) +
                           " given " +
                           str(len(parts) -1) +
                           " needed ; " +
                           data)
    # Interleave the escaped JSON parts and the parameters and put them in a (str ) clojure expression
    rval = " ".join(list(itertools.chain(*zip(["(query (str "] + params, escaped_parts))) + [") )"])
    return rval

def expand_operation(operation, subdir, fluree_parts):
    """Expand any "code_expand" or "code+from_query" in a single operation within a transaction

    Parameters
    ----------
    operation: dict
        FlureeQL operation object taken from within a transaction
    subdir: str
        Component directory name
    fluree_parts: str
        Fluree build sources top dir directory path

    Returns
    -------
    str
        Potentially expanded version of the supplied operation
    """
    # If the operation has a "params" field, use it, otherwise use empty list.
    params = []
    if "params" in operation:
        params = operation["params"]
    if "code_expand" in operation:
        # Read the file designated in the code_expand field
        path = fluree_parts + "/" + subdir + "/" + operation["code_expand"]
        with open(path) as datafile:
            data = datafile.read()
        if operation["code_expand"].split(".")[-1].lower() == "clj":
            # A clojure file contains the actual "code" content
            operation["code"] = data.rstrip()
        else:
            # A JSON file contains a JSON FlureeQL query that is converted to clojure code.
            obj = json.loads(data)
            operation["code"] = query_to_clojure(obj, params)
        # Remove the code_expand key/value
        del operation["code_expand"]
    if "code_from_query" in operation:
        # Inlined FlureeQL JSON gets converted to clojure code.
        operation["code"] = query_to_clojure(operation["code_from_query"], params)
        # Remove the code_from_query key/value
        del operation["code_from_query"]
    return operation

def expand_transaction(transaction, subdir, fluree_parts):
    """Expand any "code_expand" or "code+from_query" in a transaction

    Parameters
    ----------
    transaction: list
        FlureeQL transaction list
    subdir: str
        Component directory name
    fluree_parts: str
        Fluree build sources top dir directory path

    Returns
    -------
    str
        Potentially expanded version of the supplied transaction
    """
    rval = list()
    for operation in transaction:
        rval.append(expand_operation(operation, subdir, fluree_parts))
    return rval

async def filldb(host, port, dbase, key, keyid, transactions):
    """Run a collection if thransactions against the database

    Parameters
    ----------
    host: string
        The FlureeDB host
    port: int
        The TCP port of the FlureeDB host
    dbase: string
        The net/db string of the database on the FlureeDB host we want to submit the transactions to.
    key: string
        The ECDSA signing key for our transactions. This should be the host default key.
    keyid: string
        The key-id of the above signing key
    transactions: list
        A list with Fluree transactions to execute.

    Raises
    ------
    aioflureedb.FlureeException
        If schema transaction is invalid

    """
    # pylint: disable=too-many-arguments
    async with  aioflureedb.FlureeClient(masterkey=key, auth_address=keyid, host=host, port=port) as flureeclient:
        await flureeclient.health.ready()
        await flureeclient.new_db(db_id=dbase)
        fdb = await flureeclient[dbase]
        async with fdb(key, keyid) as database:
            await database.ready()
            for transaction in transactions:
                try:
                    await database.command.transaction(transaction)
                except aioflureedb.FlureeException as exp:
                    print("Exception while processing schema transaction")
                    print(json.dumps(transaction, indent=4, sort_keys=True))
                    print()
                    raise exp

def strip_comments_obj(operation):
    """ Strip all "COMMENT" key key/value pairs from a dict.

    Parameters
    ----------
    operation: dict
        A FlureeQL operation or query

    Returns
    -------
    dict
        A copy of the supplied dict without any COMMENT key key/value data.
    """
    rval = dict()
    for key in operation.keys():
        if key != "COMMENT":
            rval[key] = operation[key]
    return rval

def strip_comments_list(transaction):
    """ Strip all "COMMENT" key key/balue pairs from a list of dicts

    Parameters
    ----------
    transaction: list
        A FlureeQL transaction.

    Returns
    -------
    str
        A copie of the supplied transaction without any COMMENT key/value data in any of the operations.
    """
    rval = list()
    for operation in transaction:
        rval.append(strip_comments_obj(operation))
    return rval

async def do_transaction(database, rdatabase, transaction, succeed):
    """Do a single FlureeDB transaction.
    Parameters
    ----------
    database: aioflureedb._FlureeDbClient
        Database client using a regular unpriv signing key
    rdatabase: aioflureedb._FlureeDbClient
        Database client using the default "root" signing key.
    transaction: list
        Transaction to attempt
    succeed: bool
        Boolean indicating if the caller "expects" the transaction to succeed or fail

    Raises
    ------
    aioflureedb.FlureeException
        If an unexpected exception happens in a transaction.
    RuntimeError
        If a transaction or query fails where it wasn't expected to or succeeds when it was expected to fail.
    """
    # pylint: disable=too-many-branches
    try:
        try:
            # Transact without waiting for the result, we'll loop for that later
            tid = await database.command.transaction(transaction, do_await=False)
        except aioflureedb.FlureeException as exp:
            print("Exception while processing transaction for NO transaction\n",
                  json.dumps(transaction, indent=4, sort_keys=True))
            raise exp
        cont = True
        count = 0
        # Loop untill we know if the transaction succeeded.
        while cont:
            count += 1
            try:
                # Query if the transaction result is known using the "root" DB connection
                status = await rdatabase.flureeql.query(select=["*"], ffrom=["_tx/id", tid])
            except aioflureedb.FlureeException as exp:
                print("Exception while querying for transaction state with FlureeDB default key\n",
                      json.dumps(transaction, indent=4, sort_keys=True),
                      "\n",
                      tid)
                raise exp
            try:
                # Do the same using the regular signing key
                status2 = await database.flureeql.query(select=["*"], ffrom=["_tx/id", tid])
            except aioflureedb.FlureeException as exp:
                print("Exception while querying for transaction state with RUN-AS key.\n",
                      json.dumps(transaction, indent=4, sort_keys=True),
                      "\n",
                      tid)
                raise exp
            if status:
                # The transaction has completed, check what happened
                cont = False
                if not status2:
                    # We didn't get a result with the regular signing key AFTER we did get one
                    # with the root signing key.
                    if succeed:
                        # If we were expected to succeed, this is a hard error
                        print("         - ERROR: User has insuficient rights to read own transaction\n",
                              json.dumps(transaction, indent=4, sort_keys=True))
                        raise RuntimeError("Insuficient rights to read own transaction")
                    # If we were expected to fail, this still is something we need to warn about.
                    # Its probably good to allow any key to at least read its own transaction results.
                    print("         - WARNING: User has insuficient rights to read own transaction\n",
                          json.dumps(transaction, indent=4, sort_keys=True))
                if "error" in status[0]:
                    # First type of error
                    if succeed:
                        # Raise exception if we were expected to succeed.
                        print("         - ERROR: Unexpected error in YES transaction\n",
                              json.dumps(transaction, indent=4, sort_keys=True),
                              "\n",
                              status)
                        raise RuntimeError("Unexpected error in YES transaction")
                    # This was an expected error
                    print("         - NOTICE: Expected error in NO transaction\n",
                          "                 :", status[0]["error"])
                elif "_tx/error" in status[0]:
                    # Second type of error
                    if succeed:
                        # Raise exception if we were expected to succeed.
                        print("         - ERROR: Unexpected error in YES transaction\n",
                              json.dumps(transaction, indent=4, sort_keys=True),
                              "\n",
                              status)
                        raise RuntimeError("Unexpected error in YES transaction")
                    # This was an expected error
                    print("         - NOTICE: Expected error in NO transaction\n",
                          "                 :", status[0]["_tx/error"])
                elif not succeed:
                    # Raise an exception if the transaction was suposed to fail.
                    print("       - ERROR  : No error from no transaction\n",
                          json.dumps(transaction, indent=4, sort_keys=True),
                          "\n",
                          status)
                    raise RuntimeError("No error returned from NO transaction")
            else:
                # Log to console every 10 attempts of trying to check if transaction is done.
                if not count % 10:
                    print("     - waiting for transaction to finish")
                # Sleep for 100 msec before checking again
                await asyncio.sleep(0.1)
    except aioflureedb.FlureeException as exp:
        # We either succeeded or failed unexpectedly
        if succeed:
            # Log failing transaction on exception.
            print("Exception while processing transaction\n",
                  json.dumps(transaction, indent=4, sort_keys=True))
            raise exp
        print("        - Expected exception")

async def do_query(database, query, succeed):
    """Perform a Fluree query on the database.


    Parameters
    ----------
    database: aioflureedb._FlureeDbClient
        Database client using a regular unpriv signing ke
    query: dict
        FlureeQL query to attempt
    succeed: bool
        Boolean indicating if the caller "expects" the query to succeed or fail

    Raises
    ------
    RuntimeError
        Empty response to yes or non-empty reaponse to no query
    aioflureedb.FlureeException
        Exception was thrown by aioflureedb lib while performing query
    """
    # Exceptions in queries are never OK, query should return empty results on failure.
    try:
        response = await database.flureeql.query.raw(query)
    except aioflureedb.FlureeException as exp:
        print("Exception while processing query")
        print(json.dumps(query, indent=4, sort_keys=True))
        print()
        raise exp
    # On success we expect a non-empty result
    if succeed and len(response) == 0:
        print("Empty response on YES query")
        print(json.dumps(query, indent=4, sort_keys=True))
        raise RuntimeError("Empty response to YES query.")
    # On failure we expect an empty result
    if not succeed and response:
        print("Non-empty response on NO query")
        print(json.dumps(query, indent=4, sort_keys=True))
        print(json.dumps(response, indent=4, sort_keys=True))
        raise RuntimeError("Non-empty response to NO query.")

async def process_fluree_testfile(database, subdir, fluree_parts, fdb, transactionfile, succeed=True, keys=None, query=False):
    # pylint: disable=too-many-locals, too-many-arguments
    """Process a single query or transaction file from a test scenario directory

    Parameters
    ----------
    database: aioflureedb._FlureeDbClient
        FlureeQL DB Client using the priviledged "root" default signing key.
    subdir: string
        Test scenario subdir name
    fluree_parts: string
        Fluree build sources top dir directory path
    fdb: aioflureedb.FlureeClient
        Fluree Client for operations not linked to any particular database, such as database creation.
    transactionfile: str
        The file in the subdir we need to process.
    succeed: bool
        Boolean indicating if the transactions/queries in the file ar expected to succeed.
    keys: list,str,None
        List of key objects or a single key object containing the signing key and key id for running
        the transactions or queries with.
    query: bool
        Boolean indicating the file contains queries instead of transactions.

    Raises
    ------
    RuntimeError
        Problems with user.json content
    """
    basename = os.path.basename(transactionfile)
    print("   -", basename)
    # Read the file if it exists and fill a list of transactions/queries we should perform from its content.
    transactions = []
    if os.path.isfile(transactionfile):
        with open(transactionfile) as tfile:
            transactions = json.load(tfile)
    else:
        print("      - file not found, skipping:", basename)
    # The keys parameter is either a list of keys matching the list of transactions/queries, its a single key
    # that should get used for all transaction/queries, or it is None. Normalize keys to the list variant.
    if not isinstance(keys, list):
        key = keys
        keys = []
        for transaction in transactions:
            keys.append(key)
    if len(keys) == len(transactions):
        # If keys has the proper length, everyting is irie and we process all queries/transactions
        for index, transaction in enumerate(transactions):
            key = keys[index]
            if key is None:
                # Strip transactions of any "COMMENT" fields.
                transaction = strip_comments_list(transaction)
                # If the key is None, this is probably the prepare or the cleanup file, run the transaction using the
                #  priviledged signing key
                await do_transaction(database, database, transaction, succeed)
            else:
                # Use the non-priv signing key for most operations
                async with fdb(key["private"], key["account-id"]) as database2:
                    if query:
                        # Strip all queries of any "COMMENT" fields.
                        transaction = strip_comments_obj(transaction)
                        # Run the query with the non-priv signing key
                        await do_query(database2, transaction, succeed)
                    else:
                        # Strip transactions of any "COMMENT" fields.
                        transaction = strip_comments_list(transaction)
                        # Run the transaction using the priviledged signing key, use the priv signing key for
                        #  transaction probing.
                        await do_transaction(database2, database, transaction, succeed)

        print("      - Ran", len(transactions), " database ", ("transactions", "queries")[query])
    else:
        print("      - ERROR: Wrong number of keys defined in user.json.")
        raise RuntimeError("Too many keys defined in user.json")



async def run_test_scenario(database, subdir, fluree_parts, fdb, scenario):
    """Run a single full test scenario

    Parameters
    ----------
    database: aioflureedb._FlureeDbClient
        FlureeQL DB Client using the priviledged "root" default signing key.
    subdir: string
        Test scenario subdir name
    fluree_parts: string
        Fluree build sources top dir directory path
    fdb: aioflureedb.FlureeClient
        Fluree Client for operations not linked to any particular database, such as database creation.
    scenario: str
        Name of the scenario sub-subdir
    """
    # pylint: disable=too-many-branches,too-many-arguments
    print("  - SCENARIO:", scenario)
    testdir = fluree_parts + "/" + subdir + "/" + scenario + "/"
    # Process the user.json file, this file contains the signing keys used in the scenario and designates what
    # signing key is used for what part of the test scenario.
    with open(testdir + "user.json") as userfile:
        users = json.load(userfile)
    yeskeys = []
    tyeskeys = []
    nokeys = []
    tnokeys = []
    if "yes" in users:
        if isinstance(users["yes"], list):
            for idx in users["yes"]:
                yeskeys.append(users["keys"][idx])
        else:
            yeskeys = users["keys"][users["yes"]]
    if "no" in users:
        if isinstance(users["no"], list):
            for idx in users["no"]:
                nokeys.append(users["keys"][idx])
        else:
            nokeys = users["keys"][users["no"]]
    if "tyes" in users:
        if isinstance(users["tyes"], list):
            for idx in users["tyes"]:
                tyeskeys.append(users["keys"][idx])
        else:
            tyeskeys = users["keys"][users["tyes"]]
    if "tno" in users:
        if isinstance(users["tno"], list):
            for idx in users["tno"]:
                tnokeys.append(users["keys"][idx])
        else:
            tnokeys = users["keys"][users["tno"]]
    # Process the rest of the files of the test scenario.
    #
    # Prepare transactions, these should at least create the users and give them the apropriate roles
    await process_fluree_testfile(database, subdir, fluree_parts, fdb, testdir + "prepare.json")
    # Run all yes queries, these should succeed with non empty results.
    await process_fluree_testfile(database, subdir, fluree_parts, fdb, testdir + "yes.json", keys=yeskeys, query=True)
    # Run all no queries, these should fail with empty results.
    await process_fluree_testfile(database, subdir, fluree_parts, fdb, testdir + "no.json", succeed=False, keys=nokeys,
                                  query=True)
    # Run all yes transactions, these should succeed without exceptions
    await process_fluree_testfile(database, subdir, fluree_parts, fdb, testdir + "tyes.json", keys=tyeskeys)
    # Run all no transactions, these should fail with exceptions from aioflureedb
    await process_fluree_testfile(database, subdir, fluree_parts, fdb, testdir + "tno.json", succeed=False, keys=tnokeys)
    # Run cleanup transactions
    await process_fluree_testfile(database, subdir, fluree_parts, fdb, testdir + "clean")

async def smartfunction_test(host, port, dbase, key, keyid, subdir, transactions, fluree_parts):
    """Create a test database, initialize database with transactions up to stage and run all tests for stage

    Parameters
    ----------
    host: string
        The FlureeDB host
    port: int
        The TCP port of the FlureeDB host
    dbase: string
        The net/db string of the database on the FlureeDB host we want to submit the transactions to.
    key: string
        The ECDSA signing key for our transactions. This should be the host default key.
    keyid: string
        The key-id of the above signing key
    subdir: string
        The subdir name of the stage the tests are being ran for.
    transactions: list
        All transactions from the first till the current stage to run prior to test runs.
    fluree_parts:
        Fluree build sources top dir directory path


    Raises
    ------
    aioflureedb.FlureeException
        Exception from aioflureedb library in transaction
    """
    # pylint: disable=too-many-locals, too-many-arguments
    # Fluree host context, using priviledged (root role) default key.
    async with  aioflureedb.FlureeClient(masterkey=key, auth_address=keyid, host=host, port=port) as flureeclient:
        await flureeclient.health.ready()
        # Create the new database for our tests
        await flureeclient.new_db(db_id=dbase)
        fdb = await flureeclient[dbase]
        # Database context
        async with fdb(key, keyid) as database:
            await database.ready()
            # Run all the transactions in preparation to the tests
            print(" - processing schema transaction sub-set")
            for transaction in transactions:
                try:
                    await database.command.transaction(transaction)
                except aioflureedb.FlureeException as exp:
                    print("Exception while processing schema transaction")
                    print(json.dumps(transaction, indent=4, sort_keys=True))
                    print()
                    raise exp
            print(" - ok, completed", len(transactions), "transactions on", dbase)
            # Read the test scenario config file for this stage.
            with open(fluree_parts + "/" + subdir + "/test.json") as testscenariosfile:
                testscenarios = json.load(testscenariosfile)
            print(" - running test scenarios")
            # Run all test scenarios.
            for scenario in testscenarios:
                await run_test_scenario(database, subdir, fluree_parts, fdb, scenario)
            print(" -", len(testscenarios), "tests completed")

async def fluree_main(notest, network, host, port, output, createkey, createid, target, fluree_parts):
    # pylint: disable=too-many-branches, too-many-statements
    """The tools main function

    Parameters
    ----------
    notest: boolean
        Boolean indicating not to run tests, but to still deploy compiled transactions to db
    network: string
        Fluree network name for all databases to create and test with.
    host: string
        The FlureeDB host
    port: int
        The TCP port of the FlureeDB host
    output: string
        File path for output artifact
    createkey: string
        The ECDSA signing key for our transactions. This should be the host default key.
    createid: string
        The key-id of the above signing key
    target:
        The build target name to use.
    fluree_parts: string
        Fluree build sources top dir directory path
    """
    # pylint: disable=too-many-locals,too-many-arguments
    try:
        print("BUILDING", target)
        expanded = list()
        # Build.json contains the different build targets and lists their components.
        # Fetch the specified target from this file.
        with open(fluree_parts + "/build.json") as buildfile:
            build = json.load(buildfile)
            if target in build:
                build = build[target]
            else:
                print("ERROR: No target '" + target + "' in build.json")
                sys.exit(2)
        maxstage = 0
        # Outer loop for finding out where and how far to run the inner loop.
        # pylint: disable=too-many-nested-blocks
        for subdir in build:
            if output or notest:
                # If output or notest, we dont run any tests, we just fill the expanded list with expanded transactions.
                main = fluree_parts + "/" + subdir + "/main.json"
                noexpand = fluree_parts + "/" + subdir + ".json"
                if os.path.isfile(noexpand):
                    with open(noexpand) as nefile:
                        nelist = json.load(nefile)
                    for entry in nelist:
                        expanded.append(entry)
                else:
                    with open(main) as mainfile:
                        mainlist = json.load(mainfile)
                    for entry in mainlist:
                        expanded.append(expand_transaction(entry, subdir, fluree_parts))
            else:
                # Otherwise, if notest is false and the stage has a test.json, we run our inner loop for testing
                testfile = fluree_parts + "/" + subdir + "/test.json"
                if os.path.isfile(testfile) and not notest:
                    # Make up a database name for our test, using network and stage name.
                    database = network + "/" + subdir
                    database = "-".join(database.lower().split("_"))
                    expanded2 = list()
                    print("- Database:", database)
                    print(" - collecting transactions from build subdirs")
                    # Run the test with transactions from all stages up to this one.
                    for subdir2 in build[:maxstage+1]:
                        print("  -", subdir2)
                        main = fluree_parts + "/" + subdir2 + "/main.json"
                        noexpand = fluree_parts + "/" + subdir2 + ".json"
                        if os.path.isfile(noexpand):
                            with open(noexpand) as nefile:
                                nelist = json.load(nefile)
                            for entry in nelist:
                                expanded2.append(entry)
                        else:
                            with open(main) as mainfile:
                                mainlist = json.load(mainfile)
                            for entry in mainlist:
                                expanded2.append(expand_transaction(entry, subdir2, fluree_parts))
                    # Run all test scenarios for this stage
                    await smartfunction_test(host, port, database, createkey, createid, build[maxstage], expanded2,
                                             fluree_parts)
            maxstage += 1
        if output:
            # Write the expanded transaction list for all stages combined to a single artifact.
            with open(output, "w") as opf:
                opf.write(json.dumps(expanded, indent=4))
        elif notest:
            # If no output but notest specified, fill the database with the expanded tranactions list.
            database = network + "/" + target
            await filldb(host, port, database, createkey, createid, expanded)
    except (RuntimeError, aioflureedb.FlureeException) as exp:
        # For a more friendly fail
        print(str(exp))
        sys.exit(1)

async def fluree_docker(notest, target, builddir, imagetag, verbosefluree):
    """Forward arguments into a docker run of the tool

    notest: boolean
        Boolean indicating not to run tests, but to still deploy compiled transactions to db
    target:
        The build target name to use.
    fluree_parts: string
        Fluree build sources top dir directory path
    verbosefluree: boolean
        Don't send flureedb output to /dev/null
    """
    hostdir = os.getenv("PWD") + "/" + builddir
    image = "pibara/fsst:" + imagetag
    command = ["docker", "run"]
    if notest:
        command.append("-p")
        command.append("8090:8080")
    for part in ["--mount",
                 'src=' + hostdir + ',target=/usr/src/fsst/fluree_parts,type=bind',
                 "-it",
                 image,
                 "/usr/src/fsst/fsst",
                 "--pipeline",
                 "--target",
                 target]:
        command.append(part)
    if notest:
        command.append("--notest")
    if verbosefluree:
        command.append("--verbosefluree")
    print(" ".join(command))
    # TODO: may want to look into this one!
    # pylint: disable=subprocess-run-check
    return subprocess.run(command)


async def argparse_main():
    # pylint: disable=too-many-branches, too-many-statements
    """An argparse only main function invoking the real main"""
    netname = "test" + str(int(time.time()/10) % 100000)
    parser = argparse.ArgumentParser()
    if CRYPTO_OK:
        parser.add_argument("--network", help="FlureeDB network name. (generate if unspecified)", default=netname)
        parser.add_argument("--host", help="FlureeDB host. (default localhost)", default="localhost")
        parser.add_argument("--port", help="FlureeDB port. (default 8080)", default="8080")
        parser.add_argument("--createkey", help="FlureeDB signing key for creation")
        parser.add_argument("--output", help="Output JSON file. (other options ignored when used)")
        parser.add_argument('--pipeline', action='store_true', help="When run from docker image, get createkey from file.")
    parser.add_argument("--target", help="FlureeDB, build target as defined in build.json ('default' if undefined)")
    parser.add_argument('--notest', action='store_true', help="Don't run tests, do deploy compiled transactions to db")
    parser.add_argument('--dir', help="Directory containing build tree (default fluree_parts)")
    parser.add_argument('--docker', action='store_true', help="Run the tests in a docker container.")
    parser.add_argument('--tag', help="Tag to use for fsst docker image. Only used in combination with --docker.",
                        default="stable")
    parser.add_argument('--verbosefluree', action='store_true', help="dont redirect flureedb stdout/stderr to /dev/null")
    args = parser.parse_args()
    if CRYPTO_OK:
        network = args.network
        host = args.host
        port = int(args.port)
        output = args.output
        createkey = args.createkey
        pipeline = args.pipeline
    else:
        network = netname
        host = "localhost"
        port = 8080
        output = None
        createkey = None
        pipeline = False
    command = ["/bin/bash", "/usr/src/fsst/fluree_start.sh"]
    if pipeline:
        print(" ".join(command))
        if not args.notest and not args.verbosefluree:
            subprocess.Popen(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        else:
            subprocess.Popen(command)
        # os.spawnl(os.P_NOWAIT, *command)
        while not createkey:
            try:
                with open("./default-private-key.txt") as keyfile:
                    createkey = keyfile.read()
            except FileNotFoundError:
                print("# waiting for default-private-key.txt to appear")
            await asyncio.sleep(6)
    createid = None
    target = args.target
    if not target:
        target = "default"
    fluree_parts = args.dir
    if not fluree_parts:
        fluree_parts = "fluree_parts"
    if not args.docker and not CRYPTO_OK:
        print("ERROR:, no --docker specified and missing crypto libs for non-docker run")
        sys.exit(1)
    if not output:
        if createkey:
            createid = key_to_id(createkey)
        if not (createkey  and createid):
            if not args.docker:
                print("ERROR: At the very least, specify either a createkey or an output. See --help for more info")
                sys.exit(1)
    if not pipeline and args.docker:
        if args.notest:
            webbrowser.open("http://localhost:8090/")
        await fluree_docker(args.notest, target, fluree_parts, args.tag, args.verbosefluree)
    else:
        await fluree_main(args.notest, network, host, port, output, createkey, createid, target, fluree_parts)
    if pipeline:
        if args.notest:
            while True:
                await asyncio.sleep(30)
                print('.', end='', flush=True)

LOOP = asyncio.get_event_loop()
LOOP.run_until_complete(argparse_main())
